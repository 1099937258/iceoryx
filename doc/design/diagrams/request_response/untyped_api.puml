@startuml

class UntypedClient {
  Client(serviceDescription: ServiceDescription&, clientOptions: ClientOptions&)
  getUid(): UniquePortId
  getServiceDescription(): ServiceDescription
  connect(): void
  disconnect(): void
  getConnectionState(): ConnectionState
  loan(userPayloadSize: uint32_t, userPayloadAlignment: uint32_t): expected<void*, AllocationError>
  send(requestPayload: void*): expected<ClientSendError>
  releaseRequest(requestPayload: const void*): void
  hasResponses(): bool
  take(): expected<void*, Error>
  releaseResponse(responsePayload: void*): void
  releaseQueuedResponses(): void
  hasMissedResponses(): bool
}

class UntypedServer {
  Server(serviceDescription: ServiceDescription&, serverOptions: ServerOptions&)
  getUid(): UniquePortId
  getServiceDescription(): ServiceDescription
  offer(): void
  stopOffer():void
  isOffered(): bool
  hasClients(): bool
  hasRequests(): bool
  take(): expected<void*, Error>
  releaseRequest(requestPayload: void*): void
  releaseQueuedRequests(): void
  hasMissedRequests(): bool
  loan(requestHeader: RequestHeader*, userPayloadSize: uint32_t, userPayloadAlignment: uint32_t): expected<void*, AllocationError>
  send(responsePayload: void*): expected<ServerSendError>
  releaseResponse(responsePayload: const void*): void
}

@enduml
