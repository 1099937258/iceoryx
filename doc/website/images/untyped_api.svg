<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="261px" preserveAspectRatio="none" style="width:1294px;height:261px;background:#EEEBDC;" version="1.1" viewBox="0 0 1294 261" width="1294px" zoomAndPan="magnify"><defs><filter height="300%" id="f1kmyugpufmyqz" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[7c46b07ee330a5ac83506660f79e9eba]
class UntypedClient--><rect codeLine="2" fill="#FEFECE" filter="url(#f1kmyugpufmyqz)" height="227.2656" id="UntypedClient" style="stroke:#A80036;stroke-width:1.5;" width="522" x="7" y="13.5"/><ellipse cx="220.25" cy="29.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M223.2188,35.1406 Q222.6406,35.4375 222,35.5781 Q221.3594,35.7344 220.6563,35.7344 Q218.1563,35.7344 216.8281,34.0938 Q215.5156,32.4375 215.5156,29.3125 Q215.5156,26.1875 216.8281,24.5313 Q218.1563,22.875 220.6563,22.875 Q221.3594,22.875 222,23.0313 Q222.6563,23.1875 223.2188,23.4844 L223.2188,26.2031 Q222.5938,25.625 222,25.3594 Q221.4063,25.0781 220.7813,25.0781 Q219.4375,25.0781 218.75,26.1563 Q218.0625,27.2188 218.0625,29.3125 Q218.0625,31.4063 218.75,32.4844 Q219.4375,33.5469 220.7813,33.5469 Q221.4063,33.5469 222,33.2813 Q222.5938,33 223.2188,32.4219 L223.2188,35.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="87" x="240.75" y="33.6543">UntypedClient</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="528" y1="45.5" y2="45.5"/><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="528" y1="53.5" y2="53.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="491" x="13" y="67.7104">UntypedClient(serviceDescription: ServiceDescription&amp;, clientOptions: ClientOptions&amp;)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="124" x="13" y="80.5151">getUid(): UniquePortId</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="256" x="13" y="93.3198">getServiceDescription(): ServiceDescription&amp;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="83" x="13" y="106.1245">connect(): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="100" x="13" y="118.9292">disconnect(): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="220" x="13" y="131.7339">getConnectionState(): ConnectionState</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="510" x="13" y="144.5386">loan(payloadSize: uint32_t, payloadAlignment: uint32_t): expected&lt;void*, AllocationError&gt;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="328" x="13" y="157.3433">send(requestPayload: void*): expected&lt;ClientSendError&gt;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="288" x="13" y="170.1479">releaseRequest(requestPayload: const void*): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="124" x="13" y="182.9526">hasResponses(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="229" x="13" y="195.7573">take(): expected&lt;void*, AllocationError&gt;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="13" y="208.562">releaseResponse(responsePayload: void*): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="189" x="13" y="221.3667">releaseQueuedResponses(): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="164" x="13" y="234.1714">hasMissedResponses(): bool</text><!--MD5=[44227b1ab5d0bc37f306ef65b6104f3a]
class UntypedServer--><rect codeLine="19" fill="#FEFECE" filter="url(#f1kmyugpufmyqz)" height="240.0703" id="UntypedServer" style="stroke:#A80036;stroke-width:1.5;" width="716" x="564" y="7"/><ellipse cx="871.75" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M874.7188,28.6406 Q874.1406,28.9375 873.5,29.0781 Q872.8594,29.2344 872.1563,29.2344 Q869.6563,29.2344 868.3281,27.5938 Q867.0156,25.9375 867.0156,22.8125 Q867.0156,19.6875 868.3281,18.0313 Q869.6563,16.375 872.1563,16.375 Q872.8594,16.375 873.5,16.5313 Q874.1563,16.6875 874.7188,16.9844 L874.7188,19.7031 Q874.0938,19.125 873.5,18.8594 Q872.9063,18.5781 872.2813,18.5781 Q870.9375,18.5781 870.25,19.6563 Q869.5625,20.7188 869.5625,22.8125 Q869.5625,24.9063 870.25,25.9844 Q870.9375,27.0469 872.2813,27.0469 Q872.9063,27.0469 873.5,26.7813 Q874.0938,26.5 874.7188,25.9219 L874.7188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="92" x="892.25" y="27.1543">UntypedServer</text><line style="stroke:#A80036;stroke-width:1.5;" x1="565" x2="1279" y1="39" y2="39"/><line style="stroke:#A80036;stroke-width:1.5;" x1="565" x2="1279" y1="47" y2="47"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="510" x="570" y="61.2104">UntypedServer(serviceDescription: ServiceDescription&amp;, serverOptions: ServerOptions&amp;)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="124" x="570" y="74.0151">getUid(): UniquePortId</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="256" x="570" y="86.8198">getServiceDescription(): ServiceDescription&amp;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="66" x="570" y="99.6245">offer(): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="89" x="570" y="112.4292">stopOffer():void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="93" x="570" y="125.2339">isOffered(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="100" x="570" y="138.0386">hasClients(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="114" x="570" y="150.8433">hasRequests(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="265" x="570" y="163.6479">take(): expected&lt;void*, ServerRequestResult&gt;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="253" x="570" y="176.4526">releaseRequest(requestPayload: void*): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="179" x="570" y="189.2573">releaseQueuedRequests(): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="154" x="570" y="202.062">hasMissedRequests(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="704" x="570" y="214.8667">loan(requestHeader: RequestHeader*, payloadSize: uint32_t, payloadAlignment: uint32_t): expected&lt;void*, AllocationError&gt;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="344" x="570" y="227.6714">send(responsePayload: void*): expected&lt;ServerSendError&gt;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="570" y="240.4761">releaseResponse(responsePayload: const void*): void</text></g></svg>