diff --git a/iceoryx_examples/icedelivery/README.md b/iceoryx_examples/icedelivery/README.md
index 49da2188..d21b25d9 100644
--- a/iceoryx_examples/icedelivery/README.md
+++ b/iceoryx_examples/icedelivery/README.md
@@ -2,12 +2,12 @@
 
 ## Introduction
 
-This example showcases a one-way data transmission setup with zero-copy inter-process communication (IPC) on iceoryx.
-It provides publisher and subscriber applications. They come in two API flavours (untyped and typed).
+This example showcases a data transmission setup with zero-copy inter-process communication (IPC) on iceoryx.
+It provides publisher and subscriber applications. They come in two C++ API flavours (untyped and typed). Check icedelivery_on_c for the C API
 
 ## Run icedelivery
 
-Create three terminals and run one command in each of them. Choose one publisher and one subscriber and mix the typed and untyped versions.
+Create different terminals and run one command in each of them. Choose at least one publisher and one subscriber for having a data communication. You can also mix the typed and untyped versions. And if you feel like crazy today you start several publishers and subscribers from icedelivery and icedelivery_on_c (needs the default n:m communication, not possible if you build with the ONE_TO_MANY option)
 ```sh
 # If installed and available in PATH environment variable
 iox-roudi
@@ -46,9 +46,9 @@ RouDi is ready for clients
 ```
 2020-12-20 16:05:01.837 [ Debug ]: Application registered management segment 0x7fd6d39e3000 with size 64244064 to id 1
 2020-12-20 16:26:42.791 [ Info  ]: Application registered payload segment 0x7f377c4e6000 with size 149134400 to id 2
-Sent {five,two} times value: (1, 1, 1)
-Sent {five,two} times value: (2, 2, 2)
-Sent {five,two} times value: (3, 3, 3)
+Sent {five,two} times value: 1
+Sent {five,two} times value: 2
+Sent {five,two} times value: 3
 ```
 
 ### Subscriber application (typed)
@@ -56,21 +56,17 @@ Sent {five,two} times value: (3, 3, 3)
 2020-12-20 16:26:58.839 [ Debug ] Application registered management segment 0x7f6353c04000 with size 64244064 to id 1
 2020-12-20 16:26:58.839 [ Info  ] Application registered payload segment 0x7f634ab8c000 with size 149134400 to id 2
 Not subscribed!
-Got value: (2, 2, 2)
-Got value: (2, 2, 2)
-Got value: (2, 2, 2)
-Got value: (2, 2, 2)
-Got value: (2, 2, 2)
-Didn't get a value, but do something anyway.
-Didn't get a value, but do something anyway.
-Didn't get a value, but do something anyway.
-Didn't get a value, but do something anyway.
-Didn't get a value, but do something anyway.
-Got value: (3, 3, 3)
-Got value: (3, 3, 3)
-Got value: (3, 3, 3)
-Got value: (3, 3, 3)
-Got value: (3, 3, 3)
+Got value: 2
+Got value: 2
+Got value: 2
+Got value: 2
+Got value: 2
+
+Got value: 3
+Got value: 3
+Got value: 3
+Got value: 3
+Got value: 3
 
 ```
 
@@ -79,18 +75,12 @@ Got value: (3, 3, 3)
 2020-12-20 16:26:58.839 [ Debug ] Application registered management segment 0x7f6353c04000 with size 64244064 to id 1
 2020-12-20 16:26:58.839 [ Info  ] Application registered payload segment 0x7f634ab8c000 with size 149134400 to id 2
 Not subscribed!
-Got value: (2, 2, 2)
-Got value: (2, 2, 2)
-Didn't get a value, but do something anyway.
-Didn't get a value, but do something anyway.
-Didn't get a value, but do something anyway.
-Didn't get a value, but do something anyway.
-Didn't get a value, but do something anyway.
-Didn't get a value, but do something anyway.
-Didn't get a value, but do something anyway.
-Didn't get a value, but do something anyway.
-Got value: (3, 3, 3)
-Got value: (3, 3, 3)
+Got value: 2
+Got value: 2
+
+
+Got value: 3
+Got value: 3
 ```
 
 ## Code walkthrough
@@ -293,8 +283,7 @@ need to take care about all cases, but it is advised to do so.
 In the `and_then` case the content of the sample is printed to the command line:
 ```cpp
 auto object = static_cast<const RadarObject*>(sample->get());
-std::cout << "Got value: (" << object->x << ", " << object->y << ", " << object->z << ")"
-            << std::endl;
+std::cout << "Got value: " << object->x << std::endl;
 ```
 
 Please note the `static_cast` before reading out the data. It is necessary, because the untyped subscriber is unaware
diff --git a/iceoryx_examples/icedelivery/iox_publisher_typed.cpp b/iceoryx_examples/icedelivery/iox_publisher_typed.cpp
index 8dbf3267..cec34c85 100644
--- a/iceoryx_examples/icedelivery/iox_publisher_typed.cpp
+++ b/iceoryx_examples/icedelivery/iox_publisher_typed.cpp
@@ -42,7 +42,7 @@ int main()
     iox::popo::TypedPublisher<RadarObject> typedPublisher({"Radar", "FrontLeft", "Object"});
     typedPublisher.offer();
 
-    float_t ct = 0.0;
+    double ct = 0.0;
     while (!killswitch)
     {
         ++ct;
@@ -96,7 +96,7 @@ int main()
         typedPublisher.publishResultOf(getRadarObject, ct);
         typedPublisher.publishResultOf([&ct](RadarObject* object) { *object = RadarObject(ct, ct, ct); });
 
-        std::cout << "Sent five times value: (" << ct << ", " << ct << ", " << ct << ")" << std::endl;
+        std::cout << "Sent five times value: " << ct << std::endl;
 
         std::this_thread::sleep_for(std::chrono::seconds(1));
     }
diff --git a/iceoryx_examples/icedelivery/iox_publisher_untyped.cpp b/iceoryx_examples/icedelivery/iox_publisher_untyped.cpp
index 34a911e0..17c288cf 100644
--- a/iceoryx_examples/icedelivery/iox_publisher_untyped.cpp
+++ b/iceoryx_examples/icedelivery/iox_publisher_untyped.cpp
@@ -37,7 +37,7 @@ int main()
     iox::popo::UntypedPublisher untypedPublisher({"Radar", "FrontLeft", "Object"});
     untypedPublisher.offer();
 
-    float_t ct = 0.0;
+    double ct = 0.0;
     while (!killswitch)
     {
         ++ct;
@@ -73,7 +73,7 @@ int main()
                 // Do something with error
             });
 
-        std::cout << "Sent two times value: (" << ct << ", " << ct << ", " << ct << ")" << std::endl;
+        std::cout << "Sent two times value: " << ct << std::endl;
 
         std::this_thread::sleep_for(std::chrono::seconds(1));
     }
diff --git a/iceoryx_examples/icedelivery/iox_publisher_with_history.cpp b/iceoryx_examples/icedelivery/iox_publisher_with_history.cpp
index dacb9d23..e712102b 100644
--- a/iceoryx_examples/icedelivery/iox_publisher_with_history.cpp
+++ b/iceoryx_examples/icedelivery/iox_publisher_with_history.cpp
@@ -41,7 +41,7 @@ int main()
     iox::popo::TypedPublisher<RadarObject> typedPublisher({"Radar", "FrontLeft", "Object"}, publisherOptions);
     typedPublisher.offer();
 
-    float_t ct = 0.0;
+    double ct = 0.0;
     while (!killswitch)
     {
         ++ct;
@@ -55,6 +55,8 @@ int main()
             sample.publish();
         });
 
+        std::cout << "Sent value: " << ct << std::endl;
+
         std::this_thread::sleep_for(std::chrono::milliseconds(400));
     }
 
diff --git a/iceoryx_examples/icedelivery/iox_subscriber_typed.cpp b/iceoryx_examples/icedelivery/iox_subscriber_typed.cpp
index 6a66df7c..bd217c13 100644
--- a/iceoryx_examples/icedelivery/iox_subscriber_typed.cpp
+++ b/iceoryx_examples/icedelivery/iox_subscriber_typed.cpp
@@ -49,10 +49,9 @@ int main()
         {
             typedSubscriber.take()
                 .and_then([](iox::popo::Sample<const RadarObject>& object) {
-                    std::cout << "Got value: (" << object->x << ", " << object->y << ", " << object->z << ")"
-                              << std::endl;
+                    std::cout << "Got value: " << object->x << std::endl;
                 })
-                .if_empty([] { std::cout << "Didn't get a value, but do something anyway." << std::endl; })
+                .if_empty([] { std::cout << std::endl; })
                 .or_else([](iox::popo::ChunkReceiveError) { std::cout << "Error receiving chunk." << std::endl; });
         }
         else
diff --git a/iceoryx_examples/icedelivery/iox_subscriber_untyped.cpp b/iceoryx_examples/icedelivery/iox_subscriber_untyped.cpp
index 48c85bab..7136566c 100644
--- a/iceoryx_examples/icedelivery/iox_subscriber_untyped.cpp
+++ b/iceoryx_examples/icedelivery/iox_subscriber_untyped.cpp
@@ -50,10 +50,9 @@ int main()
             untypedSubscriber.take()
                 .and_then([](iox::popo::Sample<const void>& sample) {
                     auto object = static_cast<const RadarObject*>(sample.get());
-                    std::cout << "Got value: (" << object->x << ", " << object->y << ", " << object->z << ")"
-                              << std::endl;
+                    std::cout << "Got value: " << object->x << std::endl;
                 })
-                .if_empty([] { std::cout << "Didn't get a value, but do something anyway." << std::endl; })
+                .if_empty([] { std::cout << std::endl; })
                 .or_else([](iox::popo::ChunkReceiveError) { std::cout << "Error receiving chunk." << std::endl; });
         }
         else
diff --git a/iceoryx_examples/icedelivery/iox_subscriber_with_history.cpp b/iceoryx_examples/icedelivery/iox_subscriber_with_history.cpp
index e1dc6cf9..fbdae323 100644
--- a/iceoryx_examples/icedelivery/iox_subscriber_with_history.cpp
+++ b/iceoryx_examples/icedelivery/iox_subscriber_with_history.cpp
@@ -40,8 +40,8 @@ int main()
     iox::popo::SubscriberOptions subscriberOptions;
     subscriberOptions.queueCapacity = 10U;
     // When starting the subscriber late it will miss the first samples which the
-    // publisher has send. The history ensures that we at least get the last 10
-    // samples send by the publisher when we subscribe.
+    // publisher has send. The history ensures that we at least get the last 5
+    // samples sent by the publisher when we subscribe (if at least 5 were already sent).
     subscriberOptions.historyRequest = 5U;
     iox::popo::TypedSubscriber<RadarObject> typedSubscriber({"Radar", "FrontLeft", "Object"}, subscriberOptions);
     typedSubscriber.subscribe();
@@ -58,8 +58,7 @@ int main()
             {
                 typedSubscriber.take()
                     .and_then([](iox::popo::Sample<const RadarObject>& object) {
-                        std::cout << "Got value: (" << object->x << ", " << object->y << ", " << object->z << ")"
-                                  << std::endl;
+                        std::cout << "Got value: " << object->x << std::endl;
                     })
                     .if_empty([&] { hasMoreSamples = false; });
             } while (hasMoreSamples);
diff --git a/iceoryx_examples/icedelivery_on_c/README.md b/iceoryx_examples/icedelivery_on_c/README.md
index c675ab62..0f5607da 100644
--- a/iceoryx_examples/icedelivery_on_c/README.md
+++ b/iceoryx_examples/icedelivery_on_c/README.md
@@ -44,7 +44,7 @@ Let's take a look at the `receiving` function which comes with the
     const uint64_t historyRequest = 10U;
     const uint64_t queueCapacity = 5U;
     iox_sub_storage_t subscriberStorage;
-    iox_sub_t subscriber = iox_sub_init(&subscriberStorage, "Radar", "FrontLeft", "Counter", queueCapacity, historyRequest);
+    iox_sub_t subscriber = iox_sub_init(&subscriberStorage, "Radar", "FrontLeft", "Object", queueCapacity, historyRequest);
     ```
 
   3. We subscribe to the service.
@@ -63,8 +63,8 @@ Let's take a look at the `receiving` function which comes with the
              const void* chunk = NULL;
              while (ChunkReceiveError_SUCCESS == iox_sub_get_chunk(subscriber, &chunk))
              {
-                 const struct CounterTopic* sample = (const struct CounterTopic*)(chunk);
-                 printf("Receiving: %u\n", sample->counter);
+                 const struct RadarObject* sample = (const struct RadarObject*)(chunk);
+                 printf("Got value: %.0f\n", sample->x);
                  iox_sub_release_chunk(subscriber, chunk);
              }
          }
@@ -112,7 +112,7 @@ Let's take a look at the `sending` function which comes with the
     ```c
     const uint64_t historyRequest = 10U;
     iox_pub_storage_t publisherStorage;
-    iox_pub_t publisher = iox_pub_init(&publisherStorage, "Radar", "FrontLeft", "Counter", historyRequest);
+    iox_pub_t publisher = iox_pub_init(&publisherStorage, "Radar", "FrontLeft", "Object", historyRequest);
     ```
  3. We offer our service to the world.
     ```c
@@ -123,18 +123,20 @@ Let's take a look at the `sending` function which comes with the
     incrementing number to all subscribers every send and print the
     value of this number to the console.
     ```c
-    uint32_t ct = 0u;
+    double ct = 0.0;
 
     while (!killswitch)
     {
         void* chunk = NULL;
-        if (AllocationResult_SUCCESS == iox_pub_allocate_chunk(publisher, &chunk, sizeof(struct CounterTopic)))
+        if (AllocationResult_SUCCESS == iox_pub_allocate_chunk(publisher, &chunk, sizeof(struct RadarObject)))
         {
-            struct CounterTopic* sample = (struct CounterTopic*)chunk;
+            struct RadarObject* sample = (struct RadarObject*)chunk;
 
-            sample->counter = ct;
+            sample->x = ct;
+            sample->y = ct;
+            sample->z = ct;
 
-            printf("Sending: %u\n", ct);
+            printf("Sent value: %.0f\n", ct);
 
             iox_pub_send_chunk(publisher, chunk);
 
diff --git a/iceoryx_examples/icedelivery_on_c/ice_c_publisher.c b/iceoryx_examples/icedelivery_on_c/ice_c_publisher.c
index c942eb42..024bb2e7 100644
--- a/iceoryx_examples/icedelivery_on_c/ice_c_publisher.c
+++ b/iceoryx_examples/icedelivery_on_c/ice_c_publisher.c
@@ -36,22 +36,24 @@ void sending()
 
     const uint64_t historyRequest = 10U;
     iox_pub_storage_t publisherStorage;
-    iox_pub_t publisher = iox_pub_init(&publisherStorage, "Radar", "FrontLeft", "Counter", historyRequest);
+    iox_pub_t publisher = iox_pub_init(&publisherStorage, "Radar", "FrontLeft", "Object", historyRequest);
 
     iox_pub_offer(publisher);
 
-    uint32_t ct = 0U;
+    double ct = 0.0;
 
     while (!killswitch)
     {
         void* chunk = NULL;
-        if (AllocationResult_SUCCESS == iox_pub_allocate_chunk(publisher, &chunk, sizeof(struct CounterTopic)))
+        if (AllocationResult_SUCCESS == iox_pub_allocate_chunk(publisher, &chunk, sizeof(struct RadarObject)))
         {
-            struct CounterTopic* sample = (struct CounterTopic*)chunk;
+            struct RadarObject* sample = (struct RadarObject*)chunk;
 
-            sample->counter = ct;
+            sample->x = ct;
+            sample->y = ct;
+            sample->z = ct;
 
-            printf("Sending: %u\n", ct);
+            printf("Sent value: %.0f\n", ct);
 
             iox_pub_send_chunk(publisher, chunk);
 
diff --git a/iceoryx_examples/icedelivery_on_c/ice_c_subscriber.c b/iceoryx_examples/icedelivery_on_c/ice_c_subscriber.c
index 6b36ef8d..9c51404b 100644
--- a/iceoryx_examples/icedelivery_on_c/ice_c_subscriber.c
+++ b/iceoryx_examples/icedelivery_on_c/ice_c_subscriber.c
@@ -43,7 +43,7 @@ void receiving()
     iox_sub_storage_t subscriberStorage;
 
     iox_sub_t subscriber =
-        iox_sub_init(&subscriberStorage, "Radar", "FrontLeft", "Counter", queueCapacity, historyRequest);
+        iox_sub_init(&subscriberStorage, "Radar", "FrontLeft", "Object", queueCapacity, historyRequest);
     iox_sub_subscribe(subscriber);
 
     while (!killswitch)
@@ -55,8 +55,8 @@ void receiving()
             // new sample every 400ms and we check for new samples only every second
             while (ChunkReceiveResult_SUCCESS == iox_sub_get_chunk(subscriber, &chunk))
             {
-                const struct CounterTopic* sample = (const struct CounterTopic*)(chunk);
-                printf("Receiving: %u\n", sample->counter);
+                const struct RadarObject* sample = (const struct RadarObject*)(chunk);
+                printf("Got value: %.0f\n", sample->x);
                 iox_sub_release_chunk(subscriber, chunk);
             }
             printf("\n");
diff --git a/iceoryx_examples/icedelivery_on_c/topic_data.h b/iceoryx_examples/icedelivery_on_c/topic_data.h
index 859f6731..f765942f 100644
--- a/iceoryx_examples/icedelivery_on_c/topic_data.h
+++ b/iceoryx_examples/icedelivery_on_c/topic_data.h
@@ -17,9 +17,11 @@
 
 #include <stdint.h>
 
-struct CounterTopic
+struct RadarObject
 {
-    uint32_t counter;
+    double x;
+    double y;
+    double z;
 };
 
 #endif // IOX_EXAMPLES_ICEDELIVERY_TOPIC_DATA_HPP
diff --git a/tools/docker/README.md b/tools/docker/README.md
index 4b70001a..3e0fd764 100644
--- a/tools/docker/README.md
+++ b/tools/docker/README.md
@@ -45,11 +45,11 @@ To run the corresponding receiver application, bind another shell to the contain
 root@b10b3630f6d3:/# iox-ex-subscriber-untyped
 2020-12-18 09:04:21.692 [ Debug ]: Application registered management segment 0x7fcda1597000 with size 64244064 to id 1
 2020-12-18 09:04:21.692 [ Info  ]: Application registered payload segment 0x7fcd9875d000 with size 149134400 to id 2
-Got value: (10, 10, 10)
-Got value: (10, 10, 10)
-Got value: (11, 11, 11)
-Got value: (11, 11, 11)
-Got value: (12, 12, 12)
+Got value: 10
+Got value: 10
+Got value: 11
+Got value: 11
+Got value: 12
 ...
 ```
 
@@ -92,12 +92,12 @@ root@b10b3630f6d3:/# screen
 root@b10b3630f6d3 /# iox-ex-subscriber-untyped
 2020-12-18 09:29:24.082 [ Debug ]: Application registered management segment 0x7f39fb9fe000 with size 64244064 to id 1
 2020-12-18 09:29:24.083 [ Info  ]: Application registered payload segment 0x7f39f2bc4000 with size 149134400 to id 2
-Got value: (14, 14, 14)
-Got value: (14, 14, 14)
-Got value: (15, 15, 15)
-Got value: (15, 15, 15)
-Got value: (16, 16, 16)
-Got value: (16, 16, 16)
+Got value: 14
+Got value: 14
+Got value: 15
+Got value: 15
+Got value: 16
+Got value: 16
 ...
 ```
 
@@ -134,11 +134,11 @@ and you should see the receiver output again.
 As an exercise, try return to the sender screen and relaunch the sender, then detach from the sender screen and attach to the receiver screen and see the output based on the new sender:
 
 ```
-Got value: (104, 104, 104)
-Got value: (104, 104, 104)
-Got value: (105, 105, 105)
-Got value: (105, 105, 105)
-Got value: (106, 106, 106)
-Got value: (106, 106, 106)
+Got value: 104
+Got value: 104
+Got value: 105
+Got value: 105
+Got value: 106
+Got value: 106
 ...
 ```
