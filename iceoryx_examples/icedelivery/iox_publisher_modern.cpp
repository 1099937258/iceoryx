// Copyright (c) 2019 by Robert Bosch GmbH. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "iceoryx_posh/experimental/popo/publisher.hpp"

#include <iostream>

struct Position {
    Position(double_t x, double_t y, double_t z) : x(x), y(y), z(z)
    {};
    double_t x = 0.0;
    double_t y = 0.0;
    double_t z = 0.0;
};

bool killswitch = false;

static void sigHandler(int f_sig[[gnu::unused]])
{
    // caught SIGINT, now exit gracefully
    killswitch = true;
}

void getVehiclePosition(Position* allocation)
{
    new (allocation) Position(11.11, 22.22, 33.33);
}

int main(int argc, char *argv[])
{

    auto publisher = iox::popo::Publisher<Position>();

    // If your data is generated by another function
    publisher.publish(getVehiclePosition);

    // OR - if you want to loan a sample and construct the data with arbitrary logic

//    publisher.loan()
//        .and_then([&](iox::popo::Sample<Position>& sample){
//            getVehiclePosition(sample.allocation());
//            // OR
//            sample.emplace(77, 88, 99);
//            // OR
//            sample.emplace(getVehiclePosition);

//            // sample.publish()
//            // OR
//            // publisher.publish(std::move(sample));
//        });

    return 0;
}
